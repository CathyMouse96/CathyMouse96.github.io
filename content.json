{"pages":[],"posts":[{"title":"LRU Cache","text":"This is my solution to LeetCodeâ€™s LRU Cache problem. It is written in Python 3. In this problem, we are asked to implement an LRU cache that supports get(key) and put(key, value) in O(1) time. IntuitionWe can easily achieve O(1) time for get(key) if we use a hash table for the cache. However, we need to maintain the LRU status, or in other words, the order in which cache entries were accessed. If we do so using an array, time complexity for the operations will become O(n). So we think about using a linked list. For each key in the cache, along with its value, we store a prev pointer and a next pointer. The prev pointer points to the entry that was accessed immediately before this entry was accessed. The next pointer points to the entry that was accessed immediately after this entry was accessed. We also maintain two variables lru and mru: the key that was accessed least recently and the key that was accessed most recently, respectively. The cache looks like this: get(key) operationIf key does not exist in our cache, we return -1.If key already is the most recently accessed key (mru == key and cache[key].next == None), we do not need to make any changes to the LRU status. We simply return its value.Otherwise, if key originally was the least recently accessed key (lru == key and cache[key].prev == None), cache[key].next now becomes the least recently accessed key, and key now becomes the most recently accessed key.Otherwise, we remove key from its original spot and make it the most recently accessed key.The code is as follows:1234567891011121314151617181920212223242526272829def get(self, key): \"\"\" :type key: int :rtype: int \"\"\" if key not in self.cache: return -1 # Update LRU status value, lruprev, lrunext = self.cache[key] if not lrunext: # Already most recently used pass elif not lruprev: # Originally least recently used # next becomes lru self.cache[lrunext][1] = None self.lru = lrunext # key becomes mru self.cache[self.mru][2] = key self.cache[key][1] = self.mru self.cache[key][2] = None self.mru = key else: self.cache[lruprev][2] = lrunext self.cache[lrunext][1] = lruprev # key becomes mru self.cache[self.mru][2] = key self.cache[key][1] = self.mru self.cache[key][2] = None self.mru = key return value","link":"/2018/11/14/LRU-Cache/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2018/11/14/hello-world/"}],"tags":[{"name":"Python 3","slug":"Python-3","link":"/tags/Python-3/"}],"categories":[{"name":"LeetCode","slug":"LeetCode","link":"/categories/LeetCode/"}]}